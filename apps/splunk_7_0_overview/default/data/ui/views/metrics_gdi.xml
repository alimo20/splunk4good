<dashboard>
  <label>GDI support for line metric protocols</label>
  <description>Native support for metric data from statsD and CollectD agents.</description>
  <row>
    <panel>
      <html>
        <p>Splunk Metrics gathers metrics from different sources and stores this data into a new type of index that is optimized just for ingestion and retrieval of metrics.
        Splunk supports the following metrics-gathering tools natively as predefined sourcetypes:</p>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>collectd</title>
      <html>
<p>The collectd agent (<a href="http://collectd.org/" target="_blank">http://collectd.org/</a>), a Unix-based daemon, gathers and normalizes metrics from various sources using a plugin architecture. With the <a href="https://collectd.org/wiki/index.php/Plugin:Write_HTTP" target="_blank">write_HTTP plugin</a> enabled, it can send metrics to an HTTP(S) endpoint, such as the HTTP Event Collector (HEC) in Splunk. Collectd supports over 100 front-end plugins, for example:</p> 
        <ul>
          <li>CPU</li>
          <li>Disk</li>
          <li>Interface</li>
          <li>Load</li>
          <li>Memory</li>
          <li>Network</li>
          <li>Protocols</li>
          <li>Thermal</li>
          <li>Uptime</li>
        </ul>
      </html>
    </panel>
    <panel>
      <title>StatsD</title>
      <html>
<p>The StatsD agent (<a href="https://github.com/etsy/statsd" target="_blank">https://github.com/etsy/statsd</a>) is a push-based network daemon that, in its original form, runs on Node.js. It is mainly used to collect metrics that are generated by instrumenting application code. Most programming languages provide client libraries to emit statsd metrics.</p>
<p>Splunk allows for a StatsD client to send metrics directly to Splunk without having to send it to a StatsD server or daemon first.</p>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <div>
<p>Both of these tools are light weight and easy to use, and have a large community of support. If you want to start gathering performance metrics from your applications and systems, we suggest you review these tools to determine whether either of them suits your environment. </p>
<p>If you prefer to use a different metrics-gathering tool, you can still use Splunk to collect and analyze your data with manual configuration, using <code>props.conf</code> and <code>transforms.conf</code>. </p>
<p>For example, to support the Graphite protocol, one could create the following props/transforms stanzas:</p>
</div>

<h3>props.conf</h3>
<pre>
[graphite_plaintext]
TIME_PREFIX = \s(\d{0,10})$
NO_BINARY_CHECK = true
SHOULD_LINEMERGE = false
category = Metrics
pulldown_type = 1
TRANSFORMS-graphite-host = graphite_host
TRANSFORMS-graphite-metricname = graphite_metric_name
TRANSFORMS-graphite-metricvalue = graphite_metric_value  
</pre>

<h3>transforms.conf</h3>
<pre>
[graphite_host]
REGEX = ^(\S[^\.]+)
FORMAT = host::$1
WRITE_META = true

[graphite_metric_name]
REGEX = \.(\S+)
FORMAT = metric_name::graphite.$1
WRITE_META = true

[graphite_metric_value]
REGEX = \w+\s+(\d+.?\d+)\s+
FORMAT = _value::$1
WRITE_META = true
</pre>

<p>Alternatively, the <code>metrics_csv</code> sourcetype allows the ingestion of a CSV file that has certain named columns. For more information on metrics indexes, see <a href="metrics_store">the metrics store page</a>.</p>

      </html>
    </panel>
  </row>
</dashboard>
