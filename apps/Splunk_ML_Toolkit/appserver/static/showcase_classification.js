webpackJsonp([14],[function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__.p=function(){function make_url(){for(var seg,len,output="",i=0,l=arguments.length;i<l;i++)seg=arguments[i].toString(),len=seg.length,len>1&&"/"==seg.charAt(len-1)&&(seg=seg.substring(0,len-1)),output+="/"!=seg.charAt(0)?"/"+seg:seg;if("/"!=output){var segments=output.split("/"),firstseg=segments[1];if("static"==firstseg||"modules"==firstseg){var postfix=output.substring(firstseg.length+2,output.length);output="/"+firstseg,window.$C.BUILD_NUMBER&&(output+="/@"+window.$C.BUILD_NUMBER),window.$C.BUILD_PUSH_NUMBER&&(output+="."+window.$C.BUILD_PUSH_NUMBER),"app"==segments[2]&&(output+=":"+getConfigValue("APP_BUILD",0)),output+="/"+postfix}}var root=getConfigValue("MRSPARKLE_ROOT_PATH","/"),djangoRoot=getConfigValue("DJANGO_ROOT_PATH",""),locale=getConfigValue("LOCALE","en-US"),combinedPath="";return combinedPath=djangoRoot&&output.substring(0,djangoRoot.length)===djangoRoot?output.replace(djangoRoot,djangoRoot+"/"+locale.toLowerCase()):"/"+locale+output,""==root||"/"==root?combinedPath:root+combinedPath}function getConfigValue(key,defaultValue){if(window.$C&&window.$C.hasOwnProperty(key))return window.$C[key];if(void 0!==defaultValue)return defaultValue;throw new Error("getConfigValue - "+key+" not set, no default provided")}return make_url("/static/app/Splunk_ML_Toolkit/")+"/"}(),__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__("shim/jquery"),__webpack_require__(513),__webpack_require__("splunkjs/mvc/checkboxview"),__webpack_require__("splunkjs/mvc/dropdownview"),__webpack_require__("splunkjs/mvc/radiogroupview"),__webpack_require__("splunkjs/mvc/singleview"),__webpack_require__("splunkjs/mvc/tableview"),__webpack_require__(646),__webpack_require__(623),__webpack_require__(620),__webpack_require__(624),__webpack_require__(625),__webpack_require__(670),__webpack_require__(621),__webpack_require__(626),__webpack_require__(509),__webpack_require__(547),__webpack_require__(596),__webpack_require__(535),__webpack_require__(545),__webpack_require__(628),__webpack_require__(643),__webpack_require__(541),__webpack_require__(629),__webpack_require__(631),__webpack_require__("models/Base")],__WEBPACK_AMD_DEFINE_RESULT__=function(_jquery,_underscoreMltk,_checkboxview,_dropdownview,_radiogroupview,_singleview,_tableview,_AlgorithmParamsGroup,_Footer,_Master,_DrilldownLinker,_SearchStringDisplay,_Slider,_Spinners,_ColorPalette,_Options,_compactTemplateString,_NumberValidator,_ExperimentModel,_Fit,_EnhancedMultiDropdownView,_EnhancedTextInputView,_Forms,_Searches,_BaseAssistantView,_Base){"use strict";function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj.default=obj,newObj}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _taggedTemplateLiteral(strings,raw){return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var _jquery2=_interopRequireDefault(_jquery),_underscoreMltk2=_interopRequireDefault(_underscoreMltk),_checkboxview2=_interopRequireDefault(_checkboxview),_dropdownview2=_interopRequireDefault(_dropdownview),_radiogroupview2=_interopRequireDefault(_radiogroupview),_singleview2=_interopRequireDefault(_singleview),_tableview2=_interopRequireDefault(_tableview),_AlgorithmParamsGroup2=_interopRequireDefault(_AlgorithmParamsGroup),_Footer2=_interopRequireDefault(_Footer),_Master2=_interopRequireDefault(_Master),DrilldownLinker=_interopRequireWildcard(_DrilldownLinker),_Slider2=_interopRequireDefault(_Slider),Spinners=_interopRequireWildcard(_Spinners),ColorPalette=_interopRequireWildcard(_ColorPalette),_Options2=_interopRequireDefault(_Options),_compactTemplateString2=_interopRequireDefault(_compactTemplateString),NumberValidator=_interopRequireWildcard(_NumberValidator),_ExperimentModel2=_interopRequireDefault(_ExperimentModel),_Fit2=_interopRequireDefault(_Fit),_EnhancedMultiDropdownView2=_interopRequireDefault(_EnhancedMultiDropdownView),_EnhancedTextInputView2=_interopRequireDefault(_EnhancedTextInputView),Forms=_interopRequireWildcard(_Forms),Searches=_interopRequireWildcard(_Searches),_BaseAssistantView2=_interopRequireDefault(_BaseAssistantView),_Base2=_interopRequireDefault(_Base),_templateObject=_taggedTemplateLiteral(["| loadjob $","$\n                               | head 1\n                               | transpose\n                               | fields column"],["| loadjob $","$\n                               | head 1\n                               | transpose\n                               | fields column"]),_templateObject2=_taggedTemplateLiteral(['| loadjob $variableSearchJobIdToken$\n                               | search column != "column" AND column != "_*"'],['| loadjob $variableSearchJobIdToken$\n                               | search column != "column" AND column != "_*"']),_templateObject3=_taggedTemplateLiteral(['| loadjob $variableSearchJobIdToken$\n                               | search column != "column" AND column != $classificationTargetToken|s$ AND (column != "_*" OR column = "_time")'],['| loadjob $variableSearchJobIdToken$\n                               | search column != "column" AND column != $classificationTargetToken|s$ AND (column != "_*" OR column = "_time")']),_templateObject4=_taggedTemplateLiteral(["| loadjob $searchBarSearchJobIdToken$\n                               | sample partitions=100"],["| loadjob $searchBarSearchJobIdToken$\n                               | sample partitions=100"]),_templateObject5=_taggedTemplateLiteral(["| loadjob $dataPartitionSearchJobIdToken$\n                           | search partition_number < $trainingSetFractionToken$\n                           | fields - partition_number\n                           $preprocessTrainingSPLToken$\n                           ",""],["| loadjob $dataPartitionSearchJobIdToken$\n                           | search partition_number < $trainingSetFractionToken$\n                           | fields - partition_number\n                           $preprocessTrainingSPLToken$\n                           ",""]),_templateObject6=_taggedTemplateLiteral(["| loadjob $dataPartitionSearchJobIdToken$\n                                       | search partition_number >= $testSetFractionToken$\n                                       | fields - partition_number\n                                       $preprocessTestingSPLToken$"],["| loadjob $dataPartitionSearchJobIdToken$\n                                       | search partition_number >= $testSetFractionToken$\n                                       | fields - partition_number\n                                       $preprocessTestingSPLToken$"]),algoParamsWrapperId="classificationAlgorithmParamsControlsWrapper",ClassificationView=_BaseAssistantView2.default.extend({headerOptions:{title:"Predict Categorical Fields",description:"Predict the value of a categorical field using the values of other fields in that event."},submitButtonText:"Fit Model",searchBarTooltip:"The events returned should have at least one categorical field and one other field.",historyStatisticsFields:["precision","recall","accuracy","f1"],renderPanels:function(){function getPreprocessingFitArray(){return self.assistantFormView.preprocessPanel.buildFitSPLArray(Forms.getToken("modelNameToken"))}function getFitCommentsArray(){var fitSPLArray=self.assistantFormView.preprocessPanel.buildFitSPLArray(Forms.getToken("modelNameToken")),commentsArray=new Array(fitSPLArray.length);commentsArray.length>0&&(commentsArray[0]="apply preprocessing steps");var fitComment=void 0;return fitComment=self.model.experiment.isNew()?commentsArray.concat("fit and save a model using the entire dataset and provided parameters"):commentsArray.concat("fit and save a draft model using the entire dataset and provided parameters, a draft model will be updated to production model when you save")}function getApplyArray(){var applySPLArray=self.assistantFormView.preprocessPanel.buildApplySPLArray(Forms.getToken("modelNameToken"));return applySPLArray.concat("| apply $modelNameToken|s$")}function getApplyCommentsArray(){var applySPLArray=self.assistantFormView.preprocessPanel.buildApplySPLArray(Forms.getToken("modelNameToken")),commentsArray=new Array(applySPLArray.length);return commentsArray.length>0&&(commentsArray[0]="apply preprocessing models"),commentsArray.concat('apply the model to the entire dataset to predict "'+Forms.getToken("classificationTargetToken")+'"')}function startPostProcessingSearches(){Searches.startSearch("dataAndPredictionsTableSearch"),Searches.startSearch("confusionMatrixTableSearch"),Searches.startSearch("classificationstatisticsSearch")}function updateForm(newIsRunningValue,message){if(null!=newIsRunningValue&&(isRunning=newIsRunningValue),self.controls.classificationAlgorithmControl.settings.set("disabled",isRunning),self.controls.targetVariableControl.settings.set("disabled",isRunning),self.controls.featureVariablesControl.settings.set("disabled",isRunning),self.controls.trainingSetFractionSlider.setDisabled(isRunning),null!=self.controls.modelNameInputControl&&self.controls.modelNameInputControl.settings.set("disabled",isRunning),self.controls.classificationAlgorithmParamsControls.setDisabled(isRunning),self.assistantFormView.preprocessPanel.setDisabled(isRunning),isRunning)self.model.state.set({footerDisabled:isRunning,submitButtonText:message}),submitted&&self.model.state.trigger("submitStarted");else{var classificationTargetToken=Forms.getToken("classificationTargetToken"),classificationFeaturesToken=Forms.getToken("classificationFeaturesToken"),fieldsValid=null!=classificationTargetToken&&classificationTargetToken.length>0&&null!=classificationFeaturesToken&&classificationFeaturesToken.length>0;self.model.state.set({footerDisabled:!fieldsValid,submitButtonText:submitButtonText}),fieldsValid&&submitted&&(submitSuccess&&(self.model.experimentSubmitPristine.setFromSplunkD(self.model.experiment.toSplunkD()),self.model.state.trigger("submitSuccess"),submitSuccess=!1),submitted=!1)}}function submitForm(){!self.model.state.get("footerDisabled")&&self.controlValidity.getAll()&&(self.hideErrorMessage(),self.hideResults(),Forms.setToken("preprocessTrainingSPLToken",getPreprocessingFitArray().join("")),Forms.setToken("preprocessTestingSPLToken",Forms.parseTemplate(getApplyArray().join(""))),self.setPreprocessingStages(),Searches.getSearchManager("dataPartitionSearch").startSearch())}function updateClassificationAlgorithmParamsControls(){var controlIds=self.classificationAlgorithmParamsList[Forms.getToken("classificationAlgorithmToken")];null!=controlIds&&(self.controlValidity.clear(_underscoreMltk2.default.map(self.controls.classificationAlgorithmParamsControls.controls,function(control){return control.control.id})),self.controls.classificationAlgorithmParamsControls.activate(controlIds))}function updateClassificationAlgorithmParamsToken(){self.model.experiment.getMainSearchStageModel().algorithmParams.resetParams(self.controls.classificationAlgorithmParamsControls.serialize(!0)),Forms.setToken("classificationAlgorithmParamsToken",self.controls.classificationAlgorithmParamsControls.serialize().join(" "))}var self=this;_BaseAssistantView2.default.prototype.renderPanels.call(this);var defaultModelName=_Options2.default.getOptionByName("defaultModelName"),isRunning=!1,submitted=!1,submitSuccess=!1;this.classificationAlgorithmParamsList={LogisticRegression:["fit_intercept"],SVM:["C","gamma"],RandomForestClassifier:["n_estimators","max_depth","max_features","min_samples_split","max_leaf_nodes"],GaussianNB:[],BernoulliNB:["alpha","binarize","fit_prior"],DecisionTreeClassifier:["max_depth","max_features","min_samples_split","max_leaf_nodes","splitter","criterion"]};var submitButtonText="Fit Model";self.assistantFormView.preprocessPanel.render().$el.appendTo(self.assistantFormView.preprocessWrapper),this.controls.classificationAlgorithmParamsControls=new _AlgorithmParamsGroup2.default(self.$el.find("#"+algoParamsWrapperId)),this.controls.classificationAlgorithmControl=function(){var control=new _dropdownview2.default({id:"classificationAlgorithmControl",el:self.$el.find("#classificationAlgorithmControl"),showClearButton:!1,choices:Object.keys(self.classificationAlgorithmParamsList).map(function(algorithm){return{value:algorithm}})}).on("change",function(){var algorithm=control.val();self.model.experiment.getMainSearchStageModel().set("algorithm",algorithm),Forms.setToken("classificationAlgorithmToken",algorithm),updateClassificationAlgorithmParamsControls(),updateClassificationAlgorithmParamsToken()}).render();return control.$el.prev("label").tooltip({title:"Select an algorithm to use for predicting field values."}),control}(),this.controls.featureVariablesControl=function(){var control=new _EnhancedMultiDropdownView2.default({id:"featureVariablesControl",managerid:"featuresVariableSearch",el:self.$el.find("#featureVariablesControl"),labelField:"column",valueField:"column",width:400,allowCustomValues:!0});return control.$el.prev("label").tooltip({title:"Select the field(s) to use for predicting the value of the selected categorical field."}),control.on("change",function(){var values=control.val();self.model.experiment.getMainSearchStageModel().featureVariables.resetFields(values),Forms.setToken("rawClassificationFeaturesToken",values),null!=values&&values.length>0?Forms.setToken("classificationFeaturesToken",values.map(Forms.escape).join(" ")):Forms.unsetToken("classificationFeaturesToken"),updateForm()}),control.render(),control}(),this.controls.targetVariableControl=function(){var control=new _dropdownview2.default({id:"targetVariableControl",managerid:"targetVariableSearch",el:self.$el.find("#targetVariableControl"),labelField:"column",valueField:"column",showClearButton:!1});return control.$el.prev("label").tooltip({title:"Select a categorical field to predict. The field should have at most 100 distinct values."}),control.on("change",function(){Forms.unsetToken(["classificationFeaturesToken","classificationTargetToken","classificationPredictionToken"]),Forms.clearChoiceView(self.controls.featureVariablesControl);var targetVariable=control.val();self.model.experiment.getMainSearchStageModel().set("targetVariable",targetVariable),null!=targetVariable&&targetVariable.length>0&&(Forms.setToken("classificationTargetToken",targetVariable),Forms.setToken("classificationPredictionToken","predicted("+targetVariable+")")),updateForm()}),control.render(),control}(),this.controls.trainingSetFractionSlider=function(){function updateTrainingSetFractionSlider(trainingFraction){var testFraction=100-trainingFraction,sliderText="",tooltipText="";testFraction>0?(sliderText=trainingFraction+" / "+testFraction,tooltipText="Select the percentage of the events to use for training and for testing, respectively."):(sliderText="no split",tooltipText="100% of the data will be used for training. Note: the test statistics reflect how well the model predicts the training data."),sliderValue$El.text(sliderText),slider$El.prev("label").tooltip("destroy").tooltip({title:tooltipText})}function updateFractionTokens(trainingFraction){Forms.setToken("trainingSetFractionToken",trainingFraction),Forms.setToken("testSetFractionToken",100===trainingFraction?0:trainingFraction)}var slider$El=self.$el.find("#trainingSetFractionSlider"),sliderValue$El=self.$el.find("#trainingSetFractionSliderValue"),modelAttribute="trainingFraction",sliderModel=new _Base2.default(_defineProperty({},modelAttribute,self.model.experiment.getMainSearchStageModel().get(modelAttribute))),slider=new _Slider2.default({model:sliderModel,modelAttribute:modelAttribute,min:10,max:100,step:10,width:220}).render();return slider.model.on("change:"+modelAttribute,function(model,value){self.model.experiment.getMainSearchStageModel().set(modelAttribute,value),updateTrainingSetFractionSlider(value),updateFractionTokens(value)}),slider$El.append(slider.el),updateTrainingSetFractionSlider(slider.model.get(modelAttribute)),updateFractionTokens(slider.model.get(modelAttribute)),slider}(),function(){self.controls.classificationAlgorithmParamsControls.addControl("fit_intercept",new _checkboxview2.default({id:"fit_interceptControl",el:(0,_jquery2.default)("<div>"),default:!0}).render(),"Fit Intercept","Whether or not the model should include an implicit intercept term.",{checkboxText:"estimate the intercept"}),self.controls.classificationAlgorithmParamsControls.addControl("C",new _EnhancedTextInputView2.default({id:"CControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive number.",allowFloats:!0,min:0,minExclusive:!0}}).render(),"C","Controls the degree of regularization when fitting the model. Defaults to 1.0."),self.controls.classificationAlgorithmParamsControls.addControl("gamma",new _EnhancedTextInputView2.default({id:"gammaControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive number or zero.",allowFloats:!0,min:0}}).render(),"Gamma","Controls the width of the radial basis function kernel. Defaults to 1/number of fields."),self.controls.classificationAlgorithmParamsControls.addControl("n_estimators",new _EnhancedTextInputView2.default({id:"n_estimatorsControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive integer.",allowFloats:!1,min:1}}).render(),"N Estimators","The number of trees in the forest. Defaults to 10."),self.controls.classificationAlgorithmParamsControls.addControl("max_depth",new _EnhancedTextInputView2.default({id:"max_depthControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive integer.",allowFloats:!1,min:1}}).render(),"Max Depth",'The maximum depth of the tree. If unset, then nodes are expanded until all leaves are pure or until all leaves contain fewer samples than specified by "Min Samples Split". Ignored if "Max Leaf Nodes" is set.'),self.controls.classificationAlgorithmParamsControls.addControl("max_features",new _EnhancedTextInputView2.default({id:"max_featuresControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"custom",message:'Value must be a positive number or one of "auto", "sqrt", or "log2"',validate:function(value){return["auto","sqrt","log2"].indexOf(value)>=0||NumberValidator.validate(value,{allowFloats:!0,min:0,minExclusive:!0})}}}).render(),"Max Features",{html:!0,title:'<div style="text-align: left">\n                        The number of features to consider at each split.\n                        <br>\n                        This field supports one of several value types:\n                        <ul>\n                            <li>integer: consider this many features at each split</li>\n                            <li>float: consider the total number of features multiplied by this value</li>\n                            <li>"sqrt": consider the square root of the total number of features</li>\n                            <li>"log2": consider the base-2 logarithm of the total number of features</li>\n                        </ul>\n                        If unset, consider all features at each split\n                    </div>'}),self.controls.classificationAlgorithmParamsControls.addControl("min_samples_split",new _EnhancedTextInputView2.default({id:"min_samples_splitControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive integer.",allowFloats:!1,min:1}}).render(),"Min Samples Split","The minimum number of samples required to split an internal node. Defaults to 2."),self.controls.classificationAlgorithmParamsControls.addControl("alpha",new _EnhancedTextInputView2.default({id:"alphaControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive number or zero.",allowFloats:!0,min:0}}).render(),"Alpha","Controls Laplace/Lidstone smoothing. Set to 0 for no smoothing. Defaults to 1.0."),self.controls.classificationAlgorithmParamsControls.addControl("binarize",new _EnhancedTextInputView2.default({id:"binarizeControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be a positive number or zero.",allowFloats:!0,min:0}}).render(),"Binarize","The threshold used for converting numeric field values to the binary values expected by BernoulliNB. Values above the threshold are assumed to be 1, and values below the threshold are assumed to be 0. The default value is 0."),self.controls.classificationAlgorithmParamsControls.addControl("fit_prior",new _checkboxview2.default({id:"fit_priorControl",el:(0,_jquery2.default)("<div>"),default:!0}).render(),"Fit Prior","Whether or not to learn class prior probabilities. If not checked, classes are assumed to have uniform popularity.",{checkboxText:"learn class prior probabilities"}),self.controls.classificationAlgorithmParamsControls.addControl("max_leaf_nodes",new _EnhancedTextInputView2.default({id:"max_leaf_nodesControl",el:(0,_jquery2.default)("<div>"),default:"",optional:!0,validator:{type:"number",message:"Value must be an integer greater than 1.",allowFloats:!1,min:2}}).render(),"Max Leaf Nodes",'Grow the tree in best-first fashion until it has this many leaf nodes. Best nodes are defined as relative reduction in impurity. If unset, allows an unlimited number of leaf nodes. "Max Depth" is ignored if this is set.'),self.controls.classificationAlgorithmParamsControls.addControl("splitter",new _radiogroupview2.default({id:"splitterControl",el:(0,_jquery2.default)("<div>"),default:"best",choices:[{value:"best"},{value:"random"}]}).render(),"Splitter","The strategy used to choose the split at each node. Supported strategies are “best” to choose the best split and “random” to choose the best random split.").control.$el.addClass("mlts-radiogroup-inline"),self.controls.classificationAlgorithmParamsControls.addControl("criterion",new _radiogroupview2.default({id:"criterionControl",el:(0,_jquery2.default)("<div>"),default:"gini",choices:[{value:"gini"},{value:"entropy"}]}).render(),"Criterion","The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “entropy” for the information gain.").control.$el.addClass("mlts-radiogroup-inline"),_underscoreMltk2.default.each(self.controls.classificationAlgorithmParamsControls.controls,function(controlAttributes,id){self.listenTo(controlAttributes.control,"change",function(value,control){null!=control.options.validator&&self.controlValidity.set(control.id,control.getValidity()),updateClassificationAlgorithmParamsToken()})})}(),this.model.experiment.isNew()&&(this.controls.modelNameInputControl=function(){var control=new _EnhancedTextInputView2.default({id:"modelNameInputControl",el:self.$el.find("#modelNameInputControl"),validator:{type:"modelName"},changeOnKeyup:!0,optional:!0}).render();return control.$el.prev("label").tooltip({title:"Enter a name for the model so you can refer to it later. You might include information like the name of the dataset, the field you are predicting, or the algorithm being used."}),control.on("change",function(){var rawModelName=control.val(),isValid=!control.settings.get("invalid");self.controlValidity.set(control.id,isValid);var modelName=null==rawModelName||0===rawModelName.length?defaultModelName:rawModelName;self.model.experiment.getMainSearchStageModel().set("modelName",modelName),Forms.setToken("modelNameToken",modelName)}),control._viz.on("keyup",function(event){13===event.keyCode&&submitForm()}),control}()),this.assistantFormView.searchBarControl.events.on("change",function(){Forms.clearChoiceView(self.controls.targetVariableControl,!0),Forms.clearChoiceView(self.controls.featureVariablesControl,!0),Forms.unsetToken(["classificationTargetToken","classificationFeaturesToken","classificationPredictionToken","actualVsPredictedSortByEvalToken","actualVsPredictedSortByToken"]),updateForm(),Searches.startSearch("searchBarSearch")}),this.listenTo(this.model.state,"submit",function(){submitForm()});var dataAndPredictionsPanel=function(){var assistantPanel=new _Master2.default({el:self.$el.find("#dataAndPredictionsPanel"),title:"Prediction Results",viz:_tableview2.default,vizOptions:{id:"dataAndPredictionsTable",managerid:"dataAndPredictionsTableSearch",drilldown:"none"}}),nonMatchingColor=ColorPalette.getColorByIndex(1);return assistantPanel.viz.on("rendered",function(){var tableRows=assistantPanel.viz.$el.find("tbody").find("tr");tableRows.each(function(){var confusionMatrixRowCells$El=(0,_jquery2.default)(this).children(),actualCell=(0,_jquery2.default)(confusionMatrixRowCells$El.get(0)),predictedCell=(0,_jquery2.default)(confusionMatrixRowCells$El.get(1));actualCell.text()!==predictedCell.text()&&(actualCell.css("background-color",nonMatchingColor),predictedCell.css("background-color",nonMatchingColor))})}),assistantPanel}(),classificationstatisticsPanel=function(){var footer=new _Footer2.default(self.$el.find("#classificationstatisticsPanel"));return footer.spinnerAnchor=footer.footer.parent(".mlts-panel"),footer}(),precisionStatisticPanel=function(){return new _Master2.default({el:self.$el.find("#precisionStatisticPanel"),title:"Precision",tooltip:"Better models produce precision closer to 1.",viz:_singleview2.default,vizOptions:{id:"precisionStatisticViz",managerid:"classificationstatisticsSearch",field:"precision",numberPrecision:"0.00",height:30},footerButtons:!1})}(),recallStatisticPanel=function(){return new _Master2.default({el:self.$el.find("#recallStatisticPanel"),title:"Recall",tooltip:"Better models produce recall closer to 1.",viz:_singleview2.default,vizOptions:{id:"recallStatisticViz",managerid:"classificationstatisticsSearch",field:"recall",numberPrecision:"0.00",height:30},footerButtons:!1})}(),accuracyStatisticPanel=function(){return new _Master2.default({el:self.$el.find("#accuracyStatisticPanel"),title:"Accuracy",tooltip:"The fraction of events that were classified correctly. Better models produce accuracy closer to 1.",viz:_singleview2.default,vizOptions:{id:"accuracyStatisticViz",managerid:"classificationstatisticsSearch",field:"accuracy",numberPrecision:"0.00",height:30},footerButtons:!1})}(),fOneStatisticPanel=function(){return new _Master2.default({el:self.$el.find("#fOneStatisticPanel"),title:"F1",tooltip:"Better models produce an F1 score closer to 1.",viz:_singleview2.default,vizOptions:{id:"fOneStatisticViz",managerid:"classificationstatisticsSearch",field:"f1",numberPrecision:"0.00",height:30},footerButtons:!1})}(),confusionMatrixPanel=function(){var assistantPanel=new _Master2.default({el:self.$el.find("#confusionMatrixPanel"),title:"Classification Results (Confusion Matrix)",tooltip:"Better models produce diagonals (top left to bottom right) closer to 100% in each cell.",viz:_tableview2.default,vizOptions:{id:"confusionMatrixTable",managerid:"confusionMatrixTableSearch",drilldown:"none"}});return assistantPanel.viz.on("rendered",function(){var tableRows=assistantPanel.viz.$el.find("tbody").find("tr");tableRows.each(function(){var confusionMatrixRowCells$El=(0,_jquery2.default)(this).children(),rowTotal=0,parsedValues=[];confusionMatrixRowCells$El.each(function(cellIndex){if(cellIndex>0){var cell$El=(0,_jquery2.default)(this),cellValue=parseInt(cell$El.text(),10);rowTotal+=cellValue,parsedValues[cellIndex]=cellValue}}),confusionMatrixRowCells$El.each(function(cellIndex){var cellValue=parsedValues[cellIndex];if(cellIndex>0&&rowTotal>0&&!isNaN(cellValue)){var cell$El=(0,_jquery2.default)(this),percentage=cellValue/rowTotal;cell$El.css("background-color",ColorPalette.getGradientColor(37,36,percentage)),cell$El.text(cellValue+" ("+Math.round(1e3*percentage)/10+"%)")}})})}),assistantPanel}();return this.listenTo(self.assistantFormView.preprocessPanel,"stepChanged",function(){Forms.clearChoiceView(self.controls.targetVariableControl,!0)}),this.listenTo(this.assistantFormView.preprocessPanel.preprocessCollection,"change:state",function(){updateForm(this.assistantFormView.preprocessPanel.isPreprocessingRunning(),"Preprocessing...")}),function(){var searchBarSearch=Searches.getSearchManager("searchBarSearch");searchBarSearch.on("onStartCallback",function(){self.hideErrorMessage(),self.hideResults()}),searchBarSearch.on("onErrorCallback",function(errorMessage){Forms.clearChoiceViewOptions(self.controls.targetVariableControl),self.showErrorMessage(errorMessage),self.hideResults()})}(),function(){Searches.setSearch("variableSearch",{targetJobIdTokenName:"variableSearchJobIdToken",searchString:(0,_compactTemplateString2.default)(_templateObject,self.assistantFormView.preprocessSearchJobIdTokenName),onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("targetVariableSearch",{searchString:(0,_compactTemplateString2.default)(_templateObject2),onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("featuresVariableSearch",{searchString:(0,_compactTemplateString2.default)(_templateObject3),onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("dataPartitionSearch",{autostart:!1,targetJobIdTokenName:"dataPartitionSearchJobIdToken",searchString:(0,_compactTemplateString2.default)(_templateObject4),onStartCallback:function(){submitted=!0,updateForm(!0,"Fitting Model...")},onDoneCallback:function(){Searches.getSearchManager("trainingSearch").startSearch()},onErrorCallback:function(errorMessage){updateForm(!1),self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){var sharedSearchString="| fit $classificationAlgorithmToken$ $classificationAlgorithmParamsToken$ $classificationTargetToken|s$ from $classificationFeaturesToken$ into $modelNameToken|s$";self.listenTo(self.model.state,"openInSearch",function(){var searchInfo=self.getSearchInfo(),search=DrilldownLinker.createSearch([searchInfo.searchString].concat(getPreprocessingFitArray(),[sharedSearchString]),searchInfo.timeRange);window.open(DrilldownLinker.getUrl("search",search),"_blank")}),self.listenTo(self.model.state,"showSPL",function(){var searchInfo=self.getSearchInfo();(0,_SearchStringDisplay.showSearchStringModal)("trainingSearchStringDisplayModal","Fit a model on all your data in search",[searchInfo.searchString].concat(getPreprocessingFitArray(),[sharedSearchString]),[null].concat(getFitCommentsArray()),searchInfo.timeRange)}),Searches.setSearch("trainingSearch",{targetJobIdTokenName:"trainingJobIdToken",autostart:!1,searchString:(0,_compactTemplateString2.default)(_templateObject5,sharedSearchString),onStartCallback:function(){self.hideErrorMessage()},onDoneCallback:function(){Searches.getSearchManager("testingSearch").startSearch()},onErrorCallback:function(errorMessage){updateForm(!1),self.showErrorMessage(errorMessage),self.hideResults()}})}(),function(){Searches.setSearch("testingSearch",{targetJobIdTokenName:"testingJobIdToken",autostart:!1,searchString:(0,_compactTemplateString2.default)(_templateObject6),onDoneCallback:function(){self.accumulateExperimentHistory(Searches.getSid(this)),self.showResults(),startPostProcessingSearches(),submitSuccess=!0},onErrorCallback:function(errorMessage){self.showErrorMessage(errorMessage),self.hideResults()},onFinallyCallback:function(){updateForm(!1)}})}(),function(){var sharedSearchArray=["| table $classificationTargetToken|s$, $classificationPredictionToken|s$, $classificationFeaturesToken$"],vizQueryArray=[],vizQuerySearch=null;
dataAndPredictionsPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),dataAndPredictionsPanel.showSPLButton.on("click",function(){var searchInfo=self.getSearchInfo();(0,_SearchStringDisplay.showSearchStringModal)("dataAndPredictionsTableSearchStringDisplayModal",'Display the actual and predicted values of the "field to predict"',vizQueryArray,[null].concat(getApplyCommentsArray()),searchInfo.timeRange)}),Searches.setSearch("dataAndPredictionsTableSearch",{targetJobIdTokenName:"dataAndPredictionsTableToken",autostart:!1,searchString:["| loadjob $testingJobIdToken$"].concat(sharedSearchArray),onStartCallback:function(){var searchInfo=self.getSearchInfo();vizQueryArray=[searchInfo.searchString].concat(getApplyArray(),sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,searchInfo.timeRange),DrilldownLinker.setSearchDrilldown(dataAndPredictionsPanel.title,vizQuerySearch)}})}(),function(){var sharedSearchArray=["| `confusionmatrix($classificationTargetToken|s$,$classificationPredictionToken|s$)`"],vizQueryArray=[],vizQuerySearch=null;confusionMatrixPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),confusionMatrixPanel.showSPLButton.on("click",function(){var searchInfo=self.getSearchInfo();(0,_SearchStringDisplay.showSearchStringModal)("confusionMatrixTableSearchStringDisplayModal","Display classification results in a confusion matrix",vizQueryArray,[null].concat(getFitCommentsArray(),["use the `confusionmatrix` macro to show prediction results for each class"]),searchInfo.timeRange)}),Searches.setSearch("confusionMatrixTableSearch",{searchString:["| loadjob $testingJobIdToken$"].concat(sharedSearchArray),autostart:!1,onStartCallback:function(){Spinners.showLoadingOverlay(confusionMatrixPanel.viz.$el);var searchInfo=self.getSearchInfo();vizQueryArray=[searchInfo.searchString].concat(getApplyArray(),sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,searchInfo.timeRange),DrilldownLinker.setSearchDrilldown(confusionMatrixPanel.title,vizQuerySearch)},onFinallyCallback:function(){Spinners.hideLoadingOverlay(confusionMatrixPanel.viz.$el)}})}(),function(){var sharedSearchArray=["| `classificationstatistics($classificationTargetToken|s$, $classificationPredictionToken|s$)`"],vizQueryArray=[],vizQuerySearch=null;classificationstatisticsPanel.openInSearchButton.on("click",function(){window.open(DrilldownLinker.getUrl("search",vizQuerySearch),"_blank")}),classificationstatisticsPanel.showSPLButton.on("click",function(){var searchInfo=self.getSearchInfo();(0,_SearchStringDisplay.showSearchStringModal)("classificationstatisticsSearchStringDisplayModal","Compute precision, recall, accuracy, and F1",vizQueryArray,[null].concat(getApplyCommentsArray(),["use the `classificationstatistics` macro to compute precision, recall, accuracy, and F1"]),searchInfo.timeRange)}),Searches.setSearch("classificationstatisticsSearch",{searchString:["| loadjob $testingJobIdToken$"].concat(sharedSearchArray),autostart:!1,onStartCallback:function(){Spinners.showLoadingOverlay(classificationstatisticsPanel.spinnerAnchor);var searchInfo=self.getSearchInfo();vizQueryArray=[searchInfo.searchString].concat(getApplyArray(),sharedSearchArray),vizQuerySearch=DrilldownLinker.createSearch(vizQueryArray,searchInfo.timeRange),DrilldownLinker.setSearchDrilldown(precisionStatisticPanel.title,vizQuerySearch),DrilldownLinker.setSearchDrilldown(recallStatisticPanel.title,vizQuerySearch),DrilldownLinker.setSearchDrilldown(accuracyStatisticPanel.title,vizQuerySearch),DrilldownLinker.setSearchDrilldown(fOneStatisticPanel.title,vizQuerySearch)},onDataCallback:function(data){self.accumulateExperimentStatistics(Searches.getSid("testingSearch"),data)},onFinallyCallback:function(){Spinners.hideLoadingOverlay(classificationstatisticsPanel.spinnerAnchor)}})}(),setTimeout(updateForm,0),this},loadExperiment:function(runExperiment){var _this=this;this.stopListening(Searches.getSearchManager("searchBarSearch"),"onDoneCallback"),this.stopListening(this.controls.targetVariableControl,"datachange"),this.stopListening(this.controls.featureVariablesControl,"datachange");var searchInfo=this.getSearchInfo();this.listenToOnce(Searches.getSearchManager("searchBarSearch"),"onDoneCallback",function(){_this.assistantFormView.preprocessPanel.loadExperiment(_this.model.experiment)}),this.assistantFormView.searchBarControl.setSearchInfo(searchInfo);var mainSearchStage=this.model.experiment.getMainSearchStageModel();if(null!=mainSearchStage){var algorithm=mainSearchStage.getAlgorithm(),targetVariable=mainSearchStage.get("targetVariable"),featureVariables=mainSearchStage.featureVariables.getFieldsArray(),algorithmParams=mainSearchStage.algorithmParams.toJSON(),modelName=mainSearchStage.get("modelName"),trainingFraction=mainSearchStage.get("trainingFraction");this.controls.classificationAlgorithmControl.val(algorithm),this.controls.trainingSetFractionSlider.model.set("trainingFraction",trainingFraction),this.listenTo(this.controls.targetVariableControl,"datachange",_underscoreMltk2.default.partial(function(targetVar){_this.assistantFormView.preprocessPanel.isPreprocessingComplete()&&(_this.stopListening(_this.controls.targetVariableControl,"datachange"),Forms.setChoiceViewValueIfValid(_this.controls.targetVariableControl,targetVar))},targetVariable)),this.listenToOnce(this.controls.featureVariablesControl,"datachange",_underscoreMltk2.default.partial(function(featureVars,runExp){Forms.setChoiceViewValueIfValid(_this.controls.featureVariablesControl,featureVars,!0),runExp&&_this.model.state.trigger("submit")},featureVariables,runExperiment));var controlIds=this.classificationAlgorithmParamsList[algorithm];null!=controlIds&&this.controls.classificationAlgorithmParamsControls.load(algorithmParams,controlIds),null!=modelName&&null!=this.controls.modelNameInputControl&&this.controls.modelNameInputControl.val(modelName)}},setDefaultMainStage:function(){var mainSearchStage=this.model.experiment.getMainSearchStageModel();if(null==mainSearchStage&&(mainSearchStage=new _Fit2.default({algorithm:"LogisticRegression"}),this.model.experiment.addSearchStages(mainSearchStage)),null==mainSearchStage.get("trainingFraction")&&mainSearchStage.set("trainingFraction",50),null==mainSearchStage.get("modelName"))if(this.model.experiment.isNew())mainSearchStage.set("modelName",_Options2.default.getOptionByName("defaultModelName"));else{var experiementModelName=this.model.experiment.getExperimentModelName();mainSearchStage.set("modelName",experiementModelName)}var modelName=mainSearchStage.get("modelName");Forms.setToken("modelNameToken",this.model.experiment.isNew()?mainSearchStage.get("modelName"):_ExperimentModel2.default.getDraftModelNameFromProd(modelName))},controlsTemplate:'\n        <div class="mlts-input">\n            <label>Algorithm</label>\n            <div id="classificationAlgorithmControl"></div>\n        </div>\n        <div class="mlts-input">\n            <label>Field to predict</label>\n            <div id="targetVariableControl"></div>\n        </div>\n        <div class="mlts-input">\n            <label>Fields to use for predicting</label>\n            <div id="featureVariablesControl"></div>\n        </div>\n        <div class="mlts-input">\n          <label>Split for training / test: <span id="trainingSetFractionSliderValue"></span></label>\n          <div id="trainingSetFractionSlider">\n          </div>\n        </div>\n        <div id="'+algoParamsWrapperId+'"></div>\n        <% if (isNotExperiment) { %>\n        <div class="mlts-input">\n          <label>Save the model as</label>\n          <div id="modelNameInputControl"></div>\n        </div>\n        <% } %>\n    ',template:'\n\n        <div class="mlts-row mlts-results-row">\n            <div class="mlts-cell">\n             <div class="mlts-panel" id="dataAndPredictionsPanel">\n             </div>\n            </div>\n        </div>\n\n        <div class="mlts-row mlts-results-row">\n            <div class="mlts-cell">\n                <div class="mlts-panel" id="classificationstatisticsPanel">\n                    <div class="mlts-stats-panel">\n                        <div id="precisionStatisticPanel"></div>\n                        <div id="recallStatisticPanel"></div>\n                        <div id="accuracyStatisticPanel"></div>\n                        <div id="fOneStatisticPanel"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="mlts-cell">\n                 <div class="mlts-panel" id="confusionMatrixPanel">\n                 </div>\n            </div>\n        </div>\n    '});new ClassificationView}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))}]);